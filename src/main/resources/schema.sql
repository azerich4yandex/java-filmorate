-- Удаление таблиц (Важен порядок удаления таблиц)
DROP TABLE IF EXISTS FILMS_GENRES;
DROP TABLE IF EXISTS GENRES;
DROP TABLE IF EXISTS USERS_FILMS;
DROP TABLE IF EXISTS FILMS;
DROP TABLE IF EXISTS RATINGS;
DROP TABLE IF EXISTS USERS_RELATIONSHIPS;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS RELATIONSHIPS;
DROP TABLE IF EXISTS RELATIONSHIP_TYPES;
DROP TABLE IF EXISTS RELATIONSHIP_STATUSES;

-- Создание таблиц
CREATE TABLE IF NOT EXISTS PUBLIC.RATINGS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	FULL_NAME CHARACTER VARYING NOT NULL,
	CONSTRAINT RATINGS_PK PRIMARY KEY (ID)
);
COMMENT ON TABLE PUBLIC.RATINGS IS 'Таблица рейтингов';
COMMENT ON COLUMN PUBLIC.RATINGS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN PUBLIC.RATINGS.FULL_NAME IS 'Описание';

CREATE TABLE IF NOT EXISTS PUBLIC.GENRES (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	FULL_NAME CHARACTER VARYING NOT NULL,
	CONSTRAINT GENRES_PK PRIMARY KEY (ID),
	CONSTRAINT GENRES_UNIQUE_FULL_NAME UNIQUE (FULL_NAME)
);
COMMENT ON TABLE PUBLIC.GENRES IS 'Таблица жанров';
COMMENT ON COLUMN PUBLIC.GENRES.ID IS 'Идентификатор записи';
COMMENT ON COLUMN PUBLIC.GENRES.FULL_NAME IS 'Наименование';

CREATE TABLE IF NOT EXISTS PUBLIC.FILMS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	FULL_NAME CHARACTER VARYING NOT NULL,
	DESCRIPTION CHARACTER(200) NOT NULL,
	RELEASE_DATE DATE,
	DURATION INTEGER,
	RATING_ID INTEGER,
	CONSTRAINT FILMS_PK PRIMARY KEY (ID),
	CONSTRAINT FILMS_RATINGS_FK FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.RATINGS(ID),
	CONSTRAINT FILMS_DURATION_CHK CHECK (DURATION > 0)
);
COMMENT ON TABLE PUBLIC.FILMS IS 'Таблица фильмов';
COMMENT ON COLUMN PUBLIC.FILMS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN PUBLIC.FILMS.FULL_NAME IS 'Наименование';
COMMENT ON COLUMN PUBLIC.FILMS.DESCRIPTION IS 'Описание';
COMMENT ON COLUMN PUBLIC.FILMS.RELEASE_DATE IS 'Дата релиза';
COMMENT ON COLUMN PUBLIC.FILMS.DURATION IS 'Длительность';
COMMENT ON COLUMN PUBLIC.FILMS.RATING_ID IS 'Идентификатор рейтинга';

CREATE TABLE IF NOT EXISTS PUBLIC.FILMS_GENRES (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	FILM_ID INTEGER NOT NULL,
	GENRE_ID INTEGER NOT NULL,
	CONSTRAINT FILMS_GENRES_PK PRIMARY KEY (ID),
	CONSTRAINT FILMS_GENRES_UNIQUE_FILM_ID_GENRE_ID UNIQUE (FILM_ID,GENRE_ID),
	CONSTRAINT FILMS_GENRES_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(ID),
	CONSTRAINT FILMS_GENRES_GENRES_FK FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRES(ID)
);
COMMENT ON TABLE PUBLIC.FILMS_GENRES IS 'Связь между фильмами и жанрами';
COMMENT ON COLUMN PUBLIC.FILMS_GENRES.ID IS 'Идентификатор записи';
COMMENT ON COLUMN PUBLIC.FILMS_GENRES.FILM_ID IS 'Идентификатор фильма';
COMMENT ON COLUMN PUBLIC.FILMS_GENRES.GENRE_ID IS 'Идентификатор жанра';

CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	EMAIL CHARACTER(256) NOT NULL,
	LOGIN CHARACTER(256) NOT NULL,
	FULL_NAME CHARACTER VARYING,
	BIRTHDAY DATE NOT NULL,
	CONSTRAINT USERS_PK PRIMARY KEY (ID),
	CONSTRAINT USERS_UNIQUE_EMAIL UNIQUE (EMAIL),
	CONSTRAINT USERS_UNIQUE_LOGIN UNIQUE (LOGIN)
);
COMMENT ON TABLE PUBLIC.USERS IS 'Таблица пользователей';
COMMENT ON COLUMN PUBLIC.USERS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN PUBLIC.USERS.EMAIL IS 'Адрес электронной почты';
COMMENT ON COLUMN PUBLIC.USERS.LOGIN IS 'Логин';
COMMENT ON COLUMN PUBLIC.USERS.FULL_NAME IS 'Имя';
COMMENT ON COLUMN PUBLIC.USERS.BIRTHDAY IS 'Дата рождения';

CREATE TABLE IF NOT EXISTS PUBLIC.USERS_FILMS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	USER_ID INTEGER NOT NULL,
	FILM_ID INTEGER NOT NULL,
	CONSTRAINT USERS_FILMS_PK PRIMARY KEY (ID),
	CONSTRAINT USERS_FILMS_UNIQUE_USER_ID_FILM_ID UNIQUE (USER_ID,FILM_ID),
	CONSTRAINT USERS_FILMS_USERS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(ID),
	CONSTRAINT USERS_FILMS_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(ID)
);
COMMENT ON TABLE PUBLIC.USERS_FILMS IS 'Связь между пользователями и фильмами';
COMMENT ON COLUMN PUBLIC.USERS_FILMS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN PUBLIC.USERS_FILMS.USER_ID IS 'Идентификатор пользователя';
COMMENT ON COLUMN PUBLIC.USERS_FILMS.FILM_ID IS 'Идентификатор фильма';

CREATE TABLE IF NOT EXISTS PUBLIC.RELATIONSHIP_TYPES (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	FULL_NAME CHARACTER VARYING NOT NULL,
	CONSTRAINT RELATIONSHIP_TYPES_PK PRIMARY KEY (ID),
	CONSTRAINT RELATIONSHIP_TYPES_UNIQUE_FULL_NAME UNIQUE (FULL_NAME)
);
COMMENT ON TABLE PUBLIC.RELATIONSHIP_TYPES IS 'Таблица типов отношений';
COMMENT ON COLUMN PUBLIC.RELATIONSHIP_TYPES.ID IS 'Идентификатор записи';
COMMENT ON COLUMN PUBLIC.RELATIONSHIP_TYPES.FULL_NAME IS 'Наименование';

CREATE TABLE IF NOT EXISTS PUBLIC.RELATIONSHIP_STATUSES (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	FULL_NAME CHARACTER VARYING NOT NULL,
	CONSTRAINT RELATIONSHIP_STATUSES_PK PRIMARY KEY (ID),
	CONSTRAINT RELATIONSHIP_STATUSES_UNIQUE_FULL_NAME UNIQUE (FULL_NAME)
);
COMMENT ON TABLE PUBLIC.RELATIONSHIP_STATUSES IS 'Таблица статусов отношений';
COMMENT ON COLUMN PUBLIC.RELATIONSHIP_STATUSES.ID IS 'Идентификатор записи';
COMMENT ON COLUMN PUBLIC.RELATIONSHIP_STATUSES.FULL_NAME IS 'Наименование';

CREATE TABLE IF NOT EXISTS PUBLIC.RELATIONSHIPS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	TYPE_ID INTEGER NOT NULL,
	STATUS_ID INTEGER,
	CONSTRAINT RELATIONSHIPS_PK PRIMARY KEY (ID),
	CONSTRAINT RELATIONSHIPS_UNIQUE_TYPE_ID_STATUS_ID UNIQUE (TYPE_ID,STATUS_ID),
	CONSTRAINT RELATIONSHIPS_RELATIONSHIP_TYPES_FK FOREIGN KEY (TYPE_ID) REFERENCES PUBLIC.RELATIONSHIP_TYPES(ID),
	CONSTRAINT RELATIONSHIPS_RELATIONSHIP_STATUSES_FK FOREIGN KEY (STATUS_ID) REFERENCES PUBLIC.RELATIONSHIP_STATUSES(ID)
);
COMMENT ON TABLE PUBLIC.RELATIONSHIPS IS 'Таблица отношений';
COMMENT ON COLUMN PUBLIC.RELATIONSHIPS.ID IS 'Идентификатор записей';
COMMENT ON COLUMN PUBLIC.RELATIONSHIPS.TYPE_ID IS 'Идентификатор типа отношений';
COMMENT ON COLUMN PUBLIC.RELATIONSHIPS.STATUS_ID IS 'Идентификатор статуса отношений';

CREATE TABLE PUBLIC.USERS_RELATIONSHIPS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	USER_ID INTEGER NOT NULL,
	RELATIONSHIP_ID INTEGER NOT NULL,
	CONSTRAINT USERS_RELATIONSHIPS_PK PRIMARY KEY (ID),
	CONSTRAINT USERS_RELATIONSHIPS_UNIQUE_USER_ID_RELATIONSHIP_ID UNIQUE (USER_ID,RELATIONSHIP_ID),
	CONSTRAINT USERS_RELATIONSHIPS_USERS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(ID),
	CONSTRAINT USERS_RELATIONSHIPS_RELATIONSHIPS_FK FOREIGN KEY (RELATIONSHIP_ID) REFERENCES PUBLIC.RELATIONSHIPS(ID)
);
COMMENT ON TABLE PUBLIC.USERS_RELATIONSHIPS IS 'Связь пользователей и отношений';
COMMENT ON COLUMN PUBLIC.USERS_RELATIONSHIPS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN PUBLIC.USERS_RELATIONSHIPS.USER_ID IS 'Идентификатор пользователя';
COMMENT ON COLUMN PUBLIC.USERS_RELATIONSHIPS.RELATIONSHIP_ID IS 'Идентификатор отношения';

-- Заполнение справочников
WITH prepared_data AS
  (SELECT 1 AS id,
          'G' AS full_name
   UNION SELECT 2 AS id,
                'PG' AS full_name
   UNION SELECT 3 AS id,
                'PG-13' AS full_name
   UNION SELECT 4 AS id,
                'R' AS full_name
   UNION SELECT 5 AS id,
                'NC-17' AS full_name)
MERGE INTO ratings AS r USING prepared_data AS pd ON r.id = pd.id WHEN matched THEN
UPDATE
SET full_name = pd.full_name WHEN NOT matched THEN
INSERT (id,
        full_name)
VALUES(pd.id, pd.full_name);

WITH prepared_data AS
  (SELECT 1 AS id,
          'Комедия' AS full_name
   UNION SELECT 2 AS id,
                'Драма' AS full_name
   UNION SELECT 3 AS id,
                'Мультфильм' AS full_name
   UNION SELECT 4 AS id,
                'Триллер' AS full_name
   UNION SELECT 5 AS id,
                'Документальный' AS full_name
   UNION SELECT 6 AS id,
                'Боевик' AS full_name)
MERGE INTO genres AS g USING prepared_data AS pd ON g.id = pd.id WHEN matched THEN
UPDATE
SET full_name = pd.full_name WHEN NOT matched THEN
INSERT (id,
        full_name)
VALUES(pd.id, pd.full_name);

WITH prepared_data AS
  (SELECT 1 AS id,
          'Запрошено' AS full_name
   UNION SELECT 2 AS id,
                'Одобрено' AS full_name
   UNION SELECT 3 AS id,
                'Отклонено' AS full_name)
MERGE INTO relationship_statuses AS rs USING prepared_data AS pd ON rs.id = pd.id
AND rs.full_name = pd.full_name WHEN matched THEN
UPDATE
SET full_name = pd.full_name WHEN NOT matched THEN
INSERT (id,
        full_name)
VALUES(pd.id, pd.full_name);

WITH prepared_data AS
  (SELECT 1 AS id,
          'Дружба' AS full_name
   UNION SELECT 2 AS id,
                'Вражда' AS full_name
   UNION SELECT 3 AS id,
                'Семья' AS full_name
   UNION SELECT 4 AS id,
                'Любовь' AS full_name)
MERGE INTO relationship_types AS rt USING prepared_data AS pd ON rt.id = pd.id WHEN matched THEN
UPDATE
SET full_name = pd.full_name WHEN NOT matched THEN
INSERT (id,
        full_name)
VALUES(pd.id, pd.full_name);
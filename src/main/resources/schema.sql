-- Удаление таблиц (Важен порядок удаления таблиц)
DROP TABLE IF EXISTS FILMS_GENRES;
DROP TABLE IF EXISTS GENRES;
DROP TABLE IF EXISTS USERS_FILMS;
DROP TABLE IF EXISTS FRIENDS;
DROP TABLE IF EXISTS USERS_REVIEWS;
DROP TABLE IF EXISTS REVIEWS;
DROP TABLE IF EXISTS FILMS_DIRECTORS;
DROP TABLE IF EXISTS DIRECTORS;
DROP TABLE IF EXISTS FILMS;
DROP TABLE IF EXISTS FEED;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS RATINGS;


-- Создание таблиц
CREATE TABLE IF NOT EXISTS RATINGS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	FULL_NAME CHARACTER VARYING NOT NULL,
	CONSTRAINT RATINGS_PK PRIMARY KEY (ID)
);
COMMENT ON TABLE RATINGS IS 'Таблица рейтингов';
COMMENT ON COLUMN RATINGS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN RATINGS.FULL_NAME IS 'Описание';

CREATE TABLE IF NOT EXISTS GENRES (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	FULL_NAME CHARACTER VARYING NOT NULL,
	CONSTRAINT GENRES_PK PRIMARY KEY (ID),
	CONSTRAINT GENRES_UNIQUE_FULL_NAME UNIQUE (FULL_NAME)
);
COMMENT ON TABLE GENRES IS 'Таблица жанров';
COMMENT ON COLUMN GENRES.ID IS 'Идентификатор записи';
COMMENT ON COLUMN GENRES.FULL_NAME IS 'Наименование';

CREATE TABLE IF NOT EXISTS FILMS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	FULL_NAME CHARACTER VARYING NOT NULL,
	DESCRIPTION CHARACTER(200) NOT NULL,
	RELEASE_DATE DATE,
	DURATION INTEGER,
	RATING_ID INTEGER,
	CONSTRAINT FILMS_PK PRIMARY KEY (ID),
	CONSTRAINT FILMS_RATINGS_FK FOREIGN KEY (RATING_ID) REFERENCES RATINGS(ID) ON DELETE SET NULL,
	CONSTRAINT FILMS_DURATION_CHK CHECK (DURATION > 0)
);
COMMENT ON TABLE FILMS IS 'Таблица фильмов';
COMMENT ON COLUMN FILMS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN FILMS.FULL_NAME IS 'Наименование';
COMMENT ON COLUMN FILMS.DESCRIPTION IS 'Описание';
COMMENT ON COLUMN FILMS.RELEASE_DATE IS 'Дата релиза';
COMMENT ON COLUMN FILMS.DURATION IS 'Длительность';
COMMENT ON COLUMN FILMS.RATING_ID IS 'Идентификатор рейтинга';

CREATE TABLE IF NOT EXISTS FILMS_GENRES (
	FILM_ID INTEGER NOT NULL,
	GENRE_ID INTEGER NOT NULL,
	CONSTRAINT FILMS_GENRES_PK PRIMARY KEY (FILM_ID, GENRE_ID),
	CONSTRAINT FILMS_GENRES_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS(ID) ON DELETE CASCADE,
	CONSTRAINT FILMS_GENRES_GENRES_FK FOREIGN KEY (GENRE_ID) REFERENCES GENRES(ID)ON DELETE CASCADE
);
COMMENT ON TABLE FILMS_GENRES IS 'Связь между фильмами и жанрами';
COMMENT ON COLUMN FILMS_GENRES.FILM_ID IS 'Идентификатор фильма';
COMMENT ON COLUMN FILMS_GENRES.GENRE_ID IS 'Идентификатор жанра';

CREATE TABLE IF NOT EXISTS USERS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	EMAIL CHARACTER(256) NOT NULL,
	LOGIN CHARACTER(256) NOT NULL,
	FULL_NAME CHARACTER VARYING,
	BIRTHDAY DATE NOT NULL,
	CONSTRAINT USERS_PK PRIMARY KEY (ID),
	CONSTRAINT USERS_UNIQUE_EMAIL UNIQUE (EMAIL),
	CONSTRAINT USERS_UNIQUE_LOGIN UNIQUE (LOGIN)
);
COMMENT ON TABLE USERS IS 'Таблица пользователей';
COMMENT ON COLUMN USERS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN USERS.EMAIL IS 'Адрес электронной почты';
COMMENT ON COLUMN USERS.LOGIN IS 'Логин';
COMMENT ON COLUMN USERS.FULL_NAME IS 'Имя';
COMMENT ON COLUMN USERS.BIRTHDAY IS 'Дата рождения';

CREATE TABLE IF NOT EXISTS USERS_FILMS (
	ID INTEGER NOT NULL AUTO_INCREMENT,
	USER_ID INTEGER NOT NULL,
	FILM_ID INTEGER NOT NULL,
	CONSTRAINT USERS_FILMS_PK PRIMARY KEY (ID),
	CONSTRAINT USERS_FILMS_UNIQUE_USER_ID_FILM_ID UNIQUE (USER_ID,FILM_ID),
	CONSTRAINT USERS_FILMS_USERS_FK FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
	CONSTRAINT USERS_FILMS_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS(ID) ON DELETE CASCADE
);
COMMENT ON TABLE USERS_FILMS IS 'Связь между пользователями и фильмами';
COMMENT ON COLUMN USERS_FILMS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN USERS_FILMS.USER_ID IS 'Идентификатор пользователя';
COMMENT ON COLUMN USERS_FILMS.FILM_ID IS 'Идентификатор фильма';

CREATE TABLE IF NOT EXISTS FRIENDS (
  USER_ID INTEGER NOT NULL,
  OTHER_ID INTEGER NOT NULL,
  CONSTRAINT FRIENDS_PK PRIMARY KEY (USER_ID, OTHER_ID),
  CONSTRAINT FRIENDS_USERS_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
  CONSTRAINT FRIENDS_USERS_OTHER_ID_FK FOREIGN KEY (OTHER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);
COMMENT ON TABLE FRIENDS IS 'Связь между пользователями';
COMMENT ON COLUMN FRIENDS.USER_ID IS 'Идентификатор пользователя-заявителя';
COMMENT ON COLUMN FRIENDS.OTHER_ID IS 'Идентификатор пользователя-получателя';

CREATE TABLE IF NOT EXISTS REVIEWS (
  ID INTEGER NOT NULL AUTO_INCREMENT,
  USER_ID INTEGER NOT NULL,
  FILM_ID INTEGER NOT NULL,
  CONTENT CHARACTER VARYING NOT NULL,
  IS_POSITIVE BOOLEAN,
  CONSTRAINT REVIEWS_PK PRIMARY KEY (ID),
  CONSTRAINT USERS_REVIEWS_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
  CONSTRAINT FILMS_REVIEWS_FILM_ID_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS (ID) ON DELETE CASCADE
);
COMMENT ON TABLE REVIEWS IS 'Отзывы';
COMMENT ON COLUMN REVIEWS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN REVIEWS.USER_ID IS 'Идентификатор пользователя-автора';
COMMENT ON COLUMN REVIEWS.FILM_ID IS 'Идентификатор фильма, на который оставляют отзыв';
COMMENT ON COLUMN REVIEWS.CONTENT IS 'Описание отзыва';
COMMENT ON COLUMN REVIEWS.IS_POSITIVE IS 'Признак положительного отзыва';

CREATE TABLE USERS_REVIEWS (
  REVIEW_ID INTEGER NOT NULL,
  USER_ID INTEGER NOT NULL,
  USEFUL INTEGER NOT NULL,
  CONSTRAINT USERS_REVIEWS_PK PRIMARY KEY (REVIEW_ID, USER_ID),
  CONSTRAINT USERS_REVIEWS_REVIEWS_USER_ID_FK FOREIGN KEY (REVIEW_ID) REFERENCES REVIEWS (ID) ON DELETE CASCADE,
  CONSTRAINT USERS_REVIEWS_USERS_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,
  CONSTRAINT USERS_REVIEWS_USEFUL_CHK CHECK(USEFUL IN (-1, 1))
);
COMMENT ON TABLE USERS_REVIEWS IS 'Оценки отзывов от пользователей';
COMMENT ON COLUMN USERS_REVIEWS.REVIEW_ID IS 'Идентификатор отзыва';
COMMENT ON COLUMN USERS_REVIEWS.USER_ID IS 'Идентификатор пользователя';
COMMENT ON COLUMN USERS_REVIEWS.USEFUL IS 'Рейтинг полезности отзыва (-1; 1)';

CREATE TABLE DIRECTORS (
  ID INTEGER NOT NULL AUTO_INCREMENT,
  FULL_NAME CHARACTER VARYING NOT NULL,
  CONSTRAINT DIRECTORS_PK PRIMARY KEY (ID)
);
COMMENT ON TABLE DIRECTORS IS 'Режиссеры';
COMMENT ON COLUMN DIRECTORS.ID IS 'Идентификатор записи';
COMMENT ON COLUMN DIRECTORS.FULL_NAME IS 'Имя режиссера';

CREATE TABLE FILMS_DIRECTORS (
  FILM_ID INTEGER NOT NULL,
  DIRECTOR_ID INTEGER NOT NULL,
  CONSTRAINT FILMS_DIRECTORS_PK PRIMARY KEY (FILM_ID, DIRECTOR_ID),
  CONSTRAINT FILMS_DIRECTORS_FILMS_FILM_ID_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS (ID) ON DELETE CASCADE,
  CONSTRAINT FILMS_DIRECTORS_DIRECTORS_DIRECTOR_ID_FK FOREIGN KEY (DIRECTOR_ID) REFERENCES DIRECTORS (ID) ON DELETE CASCADE
);
COMMENT ON TABLE FILMS_DIRECTORS IS 'Связь фильмов и режиссеров';
COMMENT ON COLUMN FILMS_DIRECTORS.FILM_ID IS 'Идентификатор фильма';
COMMENT ON COLUMN FILMS_DIRECTORS.DIRECTOR_ID IS 'Идентификатор режиссера';

CREATE TABLE IF NOT EXISTS FEED (
  EVENT_ID INTEGER NOT NULL AUTO_INCREMENT,
  ENTITY_ID INTEGER NOT NULL,
  USER_ID INTEGER NOT NULL,
  TIME_FIELD TIMESTAMP(9) NOT NULL,
  EVENT_TYPE CHARACTER VARYING NOT NULL,
  OPERATION_TYPE CHARACTER VARYING NOT NULL,
  CONSTRAINT FEED_PK PRIMARY KEY (EVENT_ID),
  CONSTRAINT FEED_USERS_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE
);
COMMENT ON TABLE FEED IS 'Лента событий';
COMMENT ON COLUMN FEED.EVENT_ID IS 'Идентификатор записи';
COMMENT ON COLUMN FEED.ENTITY_ID IS 'Идентификатор обработанной сущности';
COMMENT ON COLUMN FEED.USER_ID IS 'Идентификатор пользователя';
COMMENT ON COLUMN FEED.TIME_FIELD IS 'Метка времени';
COMMENT ON COLUMN FEED.EVENT_TYPE IS 'Тип события';
COMMENT ON COLUMN FEED.OPERATION_TYPE IS 'Тип операции';